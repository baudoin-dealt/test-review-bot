name: MR Review Notifications

on:
  pull_request:
    types: [ready_for_review, closed]
  issue_comment:
    types: [created]

jobs:
  notify-and-react:
    runs-on: ubuntu-latest

    steps:
      - name: Check if PR is ready for review or merged, or has new comment
        id: pr_status
        run: |
          if [[ "${{ github.event.action }}" == "ready_for_review" ]]; then
            echo "PR_READY=true" >> $GITHUB_ENV
          elif [[ "${{ github.event.action }}" == "closed" ]] && [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "PR_APPROVED=true" >> $GITHUB_ENV
          elif [[ "${{ github.event.issue.pull_request }}" != "" ]] && [[ "${{ github.event.comment }}" != "" ]]; then
            echo "PR_COMMENT=true" >> $GITHUB_ENV
          else
            echo "PR_READY=false" >> $GITHUB_ENV
            echo "PR_APPROVED=false" >> $GITHUB_ENV
            echo "PR_COMMENT=false" >> $GITHUB_ENV
          fi

      - name: Decode User Mapping
        run: |
          echo ${{ secrets.USER_MAPPING }} | base64 --decode > user_mapping.json
        shell: bash

      - name: Get Slack User ID to mention in the notification
        if: env.PR_READY == 'true'
        id: slack_id
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          github_user="${{ github.event.pull_request.user.login }}"
          user_mapping=$(cat user_mapping.json)
          echo "User Mapping: $user_mapping"  # Echo the user mapping to verify
          slack_id=$(echo "$user_mapping" | jq -r --arg gh_user "$github_user" '.[$gh_user]')
          echo "GitHub User: $github_user"  # Echo the GitHub username to verify
          echo "Slack User ID: $slack_id"  # Echo the Slack user ID to verify
          echo "SLACK_USER_ID=$slack_id" >> $GITHUB_ENV
          echo "$SLACK_USER_ID"
        shell: bash

      - name: Send notification to Slack
        if: env.PR_READY == 'true'
        id: send_slack_notification
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ID }}
          SLACK_USER_ID: ${{ env.SLACK_USER_ID }}
        run: |
          response=$(curl -s -X POST -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
                       -H 'Content-type: application/json' \
                       --data '{
                         "channel": "'"$SLACK_CHANNEL"'",
                         "text": "A pull request is ready for review: <${{ github.event.pull_request.html_url }}|${{ github.event.pull_request.title }}> by <@$SLACK_USER_ID>"
                       }' https://slack.com/api/chat.postMessage)
          ts=$(echo $response | jq -r '.ts')
          echo "SLACK_MESSAGE_TS=$ts" >> $GITHUB_ENV

      - name: Retrieve Slack message timestamp
        if: env.PR_APPROVED == 'true'
        id: retrieve_ts
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ID }}
        run: |
          PR_URL="${{ github.event.pull_request.html_url }}"
          messages=$(curl -s -X GET -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
                       -H 'Content-type: application/json' \
                       "https://slack.com/api/conversations.history?channel=${SLACK_CHANNEL}&limit=1000")
          ts=$(echo $messages | jq -r --arg pr_url "$PR_URL" '.messages[] | select(.text | contains($pr_url)) | .ts')
          echo "SLACK_MESSAGE_TS=$ts" >> $GITHUB_ENV

      - name: Add reaction to Slack message
        if: env.PR_APPROVED == 'true'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ID }}
          SLACK_MESSAGE_TS: ${{ env.SLACK_MESSAGE_TS }}
        run: |
          curl -s -X POST -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
               -H 'Content-type: application/json' \
               --data '{
                 "channel": "'"$SLACK_CHANNEL"'",
                 "timestamp": "'"$SLACK_MESSAGE_TS"'",
                 "name": "white_check_mark"
               }' https://slack.com/api/reactions.add

      - name: Reply in thread to initial message
        if: env.PR_COMMENT == 'true'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL_ID }}
          SLACK_MESSAGE_TS: ${{ env.SLACK_MESSAGE_TS }}
          COMMENT_BODY: ${{ github.event.comment.body }}
          COMMENT_USER: ${{ github.event.comment.user.login }}
        run: |
              curl -s -X POST -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
                  -H 'Content-type: application/json' \
                  --data '{
                    "channel": "'"$SLACK_CHANNEL"'",
                    "text": "New comment by <@${COMMENT_USER}>: ${COMMENT_BODY}",
                    "thread_ts": "'"$SLACK_MESSAGE_TS"'"
                  }' https://slack.com/api/chat.postMessage
